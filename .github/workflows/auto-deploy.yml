name: Deploy Fullstack to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json
        
    - name: Check package-lock files
      run: |
        echo "Checking package-lock.json files..."
        ls -la frontend/package-lock.json backend/package-lock.json || true
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci --prefer-offline --no-audit
      
    - name: Install backend dependencies
      run: |
        cd backend
        ls -la package-lock.json || echo "package-lock.json not found!"
        npm ci --prefer-offline --no-audit
      
    - name: Run frontend linter
      run: cd frontend && npm run lint
      continue-on-error: true
      
    - name: Run backend linter
      run: cd backend && npm run lint
      continue-on-error: true
      
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        echo "‚úÖ Frontend build completed"
        ls -la dist/ || echo "No dist folder found"
      
    - name: Build backend
      run: |
        cd backend
        npm run build
        echo "‚úÖ Backend build completed"
        ls -la dist/ || echo "No dist folder found"
      
    - name: Verify Secrets
      run: |
        echo "üîç Checking required secrets..."
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        MISSING_SECRETS=""
        
        if [ -z "${{ secrets.VPS_HOST }}" ]; then
          echo "‚ùå VPS_HOST secret is missing"
          MISSING_SECRETS="$MISSING_SECRETS VPS_HOST"
        else
          echo "‚úÖ VPS_HOST is configured"
        fi
        
        if [ -z "${{ secrets.VPS_USERNAME }}" ]; then
          echo "‚ùå VPS_USERNAME secret is missing" 
          MISSING_SECRETS="$MISSING_SECRETS VPS_USERNAME"
        else
          echo "‚úÖ VPS_USERNAME is configured"
        fi
        
        if [ -z "${{ secrets.VPS_PASSWORD }}" ] && [ -z "${{ secrets.VPS_SSH_KEY }}" ]; then
          echo "‚ùå Either VPS_PASSWORD or VPS_SSH_KEY must be configured"
          MISSING_SECRETS="$MISSING_SECRETS VPS_PASSWORD_OR_SSH_KEY"
        else
          if [ -n "${{ secrets.VPS_PASSWORD }}" ]; then
            echo "‚úÖ VPS_PASSWORD is configured"
          fi
          if [ -n "${{ secrets.VPS_SSH_KEY }}" ]; then
            echo "‚úÖ VPS_SSH_KEY is configured"
          fi
        fi
        
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        if [ -n "$MISSING_SECRETS" ]; then
          echo ""
          echo "üö® MISSING SECRETS DETECTED:"
          echo "   $MISSING_SECRETS"
          echo ""
          echo "üìù HOW TO FIX:"
          echo "   1. Go to GitHub Repository Settings"
          echo "   2. Navigate to: Secrets and variables ‚Üí Actions"
          echo "   3. Click 'New repository secret'"
          echo "   4. Add the missing secrets listed above"
          echo ""
          echo "üìñ Full documentation: .github/DEPLOY_SECRETS.md"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          exit 1
        fi
        
        echo "‚úÖ All required secrets are configured!"
        echo "üöÄ Proceeding with deployment..."
        
    - name: Debug environment
      run: |
        echo "üîç Environment debug:"
        echo "Current directory: $(pwd)"
        echo "User: $(whoami)"
        echo "Available space:"
        df -h
        echo "Tar version:"
        tar --version
        echo "Directory contents:"
        ls -la
        echo "Find command test:"
        find . -maxdepth 1 -type f | head -5

    - name: Check for problematic files
      run: |
        echo "üîç Checking for problematic files..."
        
        # Check for files with special characters
        echo "Files with special characters:"
        find . -type f -name "*[\"\\']*" || echo "None found"
        
        # Check for very large files
        echo "Large files (>100M):"
        find . -type f -size +100M || echo "None found"
        
        # Check for broken symlinks
        echo "Broken symlinks:"
        find . -type l ! -exec test -e {} \; -print || echo "None found"
        
        # Check disk space
        echo "Disk space:"
        df -h .
        
        echo "‚úÖ File check completed"

    - name: Create deployment package
      run: |
        echo "üì¶ Creating deployment package..."
        
        # Remove any existing package
        rm -f deployment.tar.gz
        
        # Show current directory structure
        echo "üìã Current directory structure:"
        ls -la
        
        # Create a clean list of files to include
        echo "üìù Files to be packaged:"
        find . -type f \
          -not -path "./node_modules/*" \
          -not -path "./.git/*" \
          -not -path "./*/dist/*" \
          -not -path "./.vite/*" \
          -not -path "./build/*" \
          -not -path "./coverage/*" \
          -not -path "./logs/*" \
          -not -path "./.cache/*" \
          -not -path "./uploads/*" \
          -not -path "./database/*" \
          -not -path "./backups/*" \
          -not -name "*.log" \
          -not -name ".DS_Store" \
          -not -name "Thumbs.db" \
          -not -name "*.tmp" \
          -not -name "*.temp" \
          | head -20
        
        # Create package with verbose output for debugging
        echo "üîß Creating tar package..."
        tar -czf deployment.tar.gz \
          --exclude='node_modules' \
          --exclude='.git' \
          --exclude='*/dist' \
          --exclude='.vite' \
          --exclude='build' \
          --exclude='coverage' \
          --exclude='logs' \
          --exclude='*.log' \
          --exclude='.DS_Store' \
          --exclude='Thumbs.db' \
          --exclude='.cache' \
          --exclude='uploads' \
          --exclude='database' \
          --exclude='backups' \
          --exclude='*.tmp' \
          --exclude='*.temp' \
          . 2>&1 || {
            echo "‚ùå Tar command failed with exit code $?"
            echo "üìã Trying alternative approach..."
            
            # Alternative: create package without problematic options
            tar -czf deployment.tar.gz \
              --exclude='node_modules' \
              --exclude='.git' \
              --exclude='dist' \
              --exclude='build' \
              --exclude='logs' \
              --exclude='.cache' \
              . || {
                echo "‚ùå Alternative tar also failed!"
                echo "üìã Directory contents:"
                ls -la
                exit 1
              }
          }
        
        # Verify package was created
        if [ ! -f "deployment.tar.gz" ]; then
          echo "‚ùå Failed to create deployment package!"
          exit 1
        fi
        
        echo "‚úÖ Package created successfully:"
        ls -lh deployment.tar.gz
        
        # Test package integrity
        echo "üîç Testing package integrity..."
        if tar -tzf deployment.tar.gz >/dev/null 2>&1; then
          echo "‚úÖ Package integrity verified"
          echo "üì¶ Package contains $(tar -tzf deployment.tar.gz | wc -l) files"
          echo "üìã Sample contents:"
          tar -tzf deployment.tar.gz | head -10
        else
          echo "‚ùå Package integrity check failed!"
          exit 1
        fi

    - name: Create deployment package (Ultra-Simple Fallback)
      if: failure()
      run: |
        echo "üö® Using ultra-simple fallback packaging..."
        
        # Remove problematic directories first
        rm -rf node_modules .git dist build coverage logs .cache uploads database backups || true
        
        # Create simple package
        tar -czf deployment.tar.gz . || {
          echo "‚ùå Simple tar failed, trying zip..."
          apt-get update && apt-get install -y zip
          zip -r deployment.zip . -x "node_modules/*" ".git/*" "dist/*" "build/*" "logs/*"
          mv deployment.zip deployment.tar.gz
        }
        
        # Verify
        ls -lh deployment.tar.gz
        echo "‚úÖ Ultra-simple package created successfully"
        
    - name: Copy deployment package to VPS
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        source: "deployment.tar.gz"
        target: "/tmp/"
        
    - name: Deploy to VPS
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        timeout: 60s
        command_timeout: 15m
        debug: false
        script: |
          set -e
          
          echo "üöÄ Starting deployment process..."
          
          # Create application directory if it doesn't exist
          sudo mkdir -p /opt/fuseloja-fullstack
          cd /opt/fuseloja-fullstack
          
          echo "üì¶ Managing Docker containers..."
          # Stop existing container if running
          sudo docker stop fuseloja-app || true
          sudo docker rm fuseloja-app || true
          
          # Clean up old images to save space
          sudo docker image prune -af || true
          
          echo "üì• Extracting application code from uploaded package..."
          
          # Verify deployment package exists
          if [ ! -f "/tmp/deployment.tar.gz" ]; then
            echo "‚ùå Deployment package not found!"
            echo "üìÇ Available files in /tmp:"
            ls -la /tmp/
            exit 1
          fi
          
          # Extract the deployment package
          echo "‚úÖ Found deployment package: $(ls -lh /tmp/deployment.tar.gz)"
          sudo tar -xzf /tmp/deployment.tar.gz -C /opt/fuseloja-fullstack/
          
          # Clean up the deployment package
          sudo rm -f /tmp/deployment.tar.gz
          
          # Verify critical files exist
          if [ ! -f "Dockerfile.fullstack" ]; then
            echo "‚ùå Dockerfile.fullstack not found!"
            echo "üìÇ Available files:"
            ls -la
            exit 1
          fi
          
          echo "‚úÖ Successfully extracted application code"
          
          echo "‚öôÔ∏è Creating environment configuration..."
          # Create environment file with all required variables
          sudo tee .env > /dev/null << EOF
          NODE_ENV=production
          PORT=3000
          
          # JWT Configuration
          JWT_SECRET=${{ secrets.JWT_SECRET || 'default-jwt-secret-change-in-production' }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET || 'default-refresh-secret-change-in-production' }}
          JWT_EXPIRES_IN=15m
          JWT_REFRESH_EXPIRES_IN=7d
          
          # Email Configuration
          EMAIL_HOST=smtp.gmail.com
          EMAIL_PORT=587
          EMAIL_USER=${{ secrets.EMAIL_USER || '' }}
          EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD || '' }}
          EMAIL_FROM=${{ secrets.EMAIL_USER || 'noreply@fuseloja.com' }}
          
          # CORS Configuration
          CORS_ORIGINS=${{ vars.CORS_ORIGINS || 'https://fuseloja.com.br,https://www.fuseloja.com.br' }}
          
          # Domain Configuration
          DOMAIN=${{ vars.DOMAIN || 'fuseloja.com.br' }}
          
          # Database Configuration
          DATABASE_TYPE=json
          DATABASE_PATH=/opt/fuseloja-fullstack/data/database.json
          
          # Upload Configuration
          UPLOAD_PATH=/opt/fuseloja-fullstack/uploads
          MAX_FILE_SIZE=10485760
          
          # Logs Configuration
          LOG_LEVEL=info
          LOG_PATH=/opt/fuseloja-fullstack/logs
          
          # Security
          BCRYPT_ROUNDS=12
          RATE_LIMIT_WINDOW_MS=900000
          RATE_LIMIT_MAX_REQUESTS=100
          EOF
          
          echo "üèóÔ∏è Building application..."
          echo "üìã Files ready for build:"
          ls -la Dockerfile.fullstack frontend/ backend/ 2>/dev/null || echo "Some directories may not exist"
          
          # Build container with better error handling
          if ! sudo docker build -t fuseloja-app -f Dockerfile.fullstack .; then
            echo "‚ùå Docker build failed!"
            exit 1
          fi
          
          echo "üö¢ Starting container..."
          # Create required directories
          sudo mkdir -p /opt/fuseloja-fullstack/{data,uploads,logs}
          
          # Run container with improved configuration
          if ! sudo docker run -d \
            --name fuseloja-app \
            --restart unless-stopped \
            -p 3000:3000 \
            -v /opt/fuseloja-fullstack/data:/opt/fuseloja-fullstack/data \
            -v /opt/fuseloja-fullstack/uploads:/opt/fuseloja-fullstack/uploads \
            -v /opt/fuseloja-fullstack/logs:/opt/fuseloja-fullstack/logs \
            --env-file .env \
            --memory="1g" \
            --cpus="0.5" \
            fuseloja-app; then
            echo "‚ùå Failed to start container!"
            exit 1
          fi
          
          echo "üîç Verifying deployment..."
          # Wait for container to fully start
          sleep 15
          
          # Check if container is running
          if sudo docker ps | grep fuseloja-app; then
            echo "‚úÖ Container started successfully"
            
            # Wait a bit more for app to initialize
            sleep 10
            
            # Test application health
            for i in {1..6}; do
              if curl -f -s http://localhost:3000/health > /dev/null 2>&1; then
                echo "‚úÖ Application is healthy and responding"
                break
              elif [ $i -eq 6 ]; then
                echo "‚ö†Ô∏è Application health check failed after 60s"
                echo "üìã Container logs:"
                sudo docker logs --tail 50 fuseloja-app
              else
                echo "‚è≥ Waiting for application to start... (attempt $i/6)"
                sleep 10
              fi
            done
            
            # Show container status
            echo "üìä Container status:"
            sudo docker ps --filter name=fuseloja-app --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
          else
            echo "‚ùå Container failed to start"
            echo "üìã Container logs:"
            sudo docker logs fuseloja-app
            exit 1
          fi
          
          echo "üéâ Deployment completed successfully!"
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ ===== DEPLOY SUCCESSFUL ====="
        echo "‚úÖ Application deployed successfully to VPS!"
        echo "üöÄ Application URL: https://${{ vars.DOMAIN || 'your-domain.com' }}"
        echo "üåê Direct IP access: http://${{ secrets.VPS_HOST }}:3000"
        echo "üìä Container: fuseloja-app is running"
        echo "=================================="
        
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "üí• ===== DEPLOY FAILED ====="
        echo "‚ùå Deployment to VPS failed!"
        echo "üîç Check the logs above for details"
        echo "üí° Common issues:"
        echo "   - VPS secrets not configured"
        echo "   - Docker build errors"
        echo "   - Network connectivity issues"
        echo "   - Insufficient VPS resources"
        echo "=============================" 