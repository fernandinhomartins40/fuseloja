name: Deploy Fullstack to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json
        
    - name: Check package-lock files
      run: |
        echo "Checking package-lock.json files..."
        ls -la frontend/package-lock.json backend/package-lock.json || true
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci --prefer-offline --no-audit
      
    - name: Install backend dependencies
      run: |
        cd backend
        ls -la package-lock.json || echo "package-lock.json not found!"
        npm ci --prefer-offline --no-audit
      
    - name: Run frontend linter
      run: cd frontend && npm run lint
      continue-on-error: true
      
    - name: Run backend linter
      run: cd backend && npm run lint
      continue-on-error: true
      
    - name: Build frontend
      run: cd frontend && npm run build
      
    - name: Build backend
      run: cd backend && npm run build
      
    - name: Verify Secrets
      run: |
        echo "🔍 Checking required secrets..."
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
        MISSING_SECRETS=""
        
        if [ -z "${{ secrets.VPS_HOST }}" ]; then
          echo "❌ VPS_HOST secret is missing"
          MISSING_SECRETS="$MISSING_SECRETS VPS_HOST"
        else
          echo "✅ VPS_HOST is configured"
        fi
        
        if [ -z "${{ secrets.VPS_USERNAME }}" ]; then
          echo "❌ VPS_USERNAME secret is missing" 
          MISSING_SECRETS="$MISSING_SECRETS VPS_USERNAME"
        else
          echo "✅ VPS_USERNAME is configured"
        fi
        
        if [ -z "${{ secrets.VPS_PASSWORD }}" ] && [ -z "${{ secrets.VPS_SSH_KEY }}" ]; then
          echo "❌ Either VPS_PASSWORD or VPS_SSH_KEY must be configured"
          MISSING_SECRETS="$MISSING_SECRETS VPS_PASSWORD_OR_SSH_KEY"
        else
          if [ -n "${{ secrets.VPS_PASSWORD }}" ]; then
            echo "✅ VPS_PASSWORD is configured"
          fi
          if [ -n "${{ secrets.VPS_SSH_KEY }}" ]; then
            echo "✅ VPS_SSH_KEY is configured"
          fi
        fi
        
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
        if [ -n "$MISSING_SECRETS" ]; then
          echo ""
          echo "🚨 MISSING SECRETS DETECTED:"
          echo "   $MISSING_SECRETS"
          echo ""
          echo "📝 HOW TO FIX:"
          echo "   1. Go to GitHub Repository Settings"
          echo "   2. Navigate to: Secrets and variables → Actions"
          echo "   3. Click 'New repository secret'"
          echo "   4. Add the missing secrets listed above"
          echo ""
          echo "📖 Full documentation: .github/DEPLOY_SECRETS.md"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          exit 1
        fi
        
        echo "✅ All required secrets are configured!"
        echo "🚀 Proceeding with deployment..."
        
    - name: Deploy to VPS
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        timeout: 60s
        command_timeout: 15m
        debug: false
        script: |
          set -e
          
          echo "🚀 Starting deployment process..."
          
          # Create application directory if it doesn't exist
          sudo mkdir -p /opt/fuseloja-fullstack
          cd /opt/fuseloja-fullstack
          
          echo "📦 Managing Docker containers..."
          # Stop existing container if running
          sudo docker stop fuseloja-app || true
          sudo docker rm fuseloja-app || true
          
          # Clean up old images to save space
          sudo docker image prune -af || true
          
          echo "📥 Updating application code..."
          # Remove existing app directory to ensure clean state
          sudo rm -rf app
          
          # Clone repository (public repo, no auth needed)
          if ! git clone https://github.com/fernandinhomartins40/fuseloja.git app; then
            echo "❌ Failed to clone repository"
            echo "🔧 Trying alternative method..."
            # Alternative: download as zip
            curl -L https://github.com/fernandinhomartins40/fuseloja/archive/main.zip -o fuseloja.zip
            unzip -q fuseloja.zip
            mv fuseloja-main app
            rm fuseloja.zip
          fi
          
          # Verify app directory exists and has content
          if [ ! -d "app" ] || [ -z "$(ls -A app 2>/dev/null)" ]; then
            echo "❌ Failed to download application code"
            exit 1
          fi
          
          echo "📁 Successfully downloaded $(du -sh app | cut -f1) of application code"
          
          # Copy source files
          sudo cp -r app/* . 2>/dev/null || true
          sudo cp app/.* . 2>/dev/null || true
          
          # Verify critical files exist
          if [ ! -f "Dockerfile.fullstack" ]; then
            echo "❌ Dockerfile.fullstack not found after copy!"
            echo "📂 Available files:"
            ls -la
            exit 1
          fi
          
          echo "⚙️ Creating environment configuration..."
          # Create environment file with all required variables
          sudo tee .env > /dev/null << EOF
          NODE_ENV=production
          PORT=3000
          
          # JWT Configuration
          JWT_SECRET=${{ secrets.JWT_SECRET || 'default-jwt-secret-change-in-production' }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET || 'default-refresh-secret-change-in-production' }}
          JWT_EXPIRES_IN=15m
          JWT_REFRESH_EXPIRES_IN=7d
          
          # Email Configuration
          EMAIL_HOST=smtp.gmail.com
          EMAIL_PORT=587
          EMAIL_USER=${{ secrets.EMAIL_USER || '' }}
          EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD || '' }}
          EMAIL_FROM=${{ secrets.EMAIL_USER || 'noreply@fuseloja.com' }}
          
          # CORS Configuration
          CORS_ORIGINS=${{ vars.CORS_ORIGINS || 'https://fuseloja.com.br,https://www.fuseloja.com.br' }}
          
          # Domain Configuration
          DOMAIN=${{ vars.DOMAIN || 'fuseloja.com.br' }}
          
          # Database Configuration
          DATABASE_TYPE=json
          DATABASE_PATH=/opt/fuseloja-fullstack/data/database.json
          
          # Upload Configuration
          UPLOAD_PATH=/opt/fuseloja-fullstack/uploads
          MAX_FILE_SIZE=10485760
          
          # Logs Configuration
          LOG_LEVEL=info
          LOG_PATH=/opt/fuseloja-fullstack/logs
          
          # Security
          BCRYPT_ROUNDS=12
          RATE_LIMIT_WINDOW_MS=900000
          RATE_LIMIT_MAX_REQUESTS=100
          EOF
          
          echo "🏗️ Building application..."
          echo "📋 Files ready for build:"
          ls -la Dockerfile.fullstack frontend/ backend/ 2>/dev/null || echo "Some directories may not exist"
          
          # Build container with better error handling
          if ! sudo docker build -t fuseloja-app -f Dockerfile.fullstack .; then
            echo "❌ Docker build failed!"
            exit 1
          fi
          
          echo "🚢 Starting container..."
          # Create required directories
          sudo mkdir -p /opt/fuseloja-fullstack/{data,uploads,logs}
          
          # Run container with improved configuration
          if ! sudo docker run -d \
            --name fuseloja-app \
            --restart unless-stopped \
            -p 3000:3000 \
            -v /opt/fuseloja-fullstack/data:/opt/fuseloja-fullstack/data \
            -v /opt/fuseloja-fullstack/uploads:/opt/fuseloja-fullstack/uploads \
            -v /opt/fuseloja-fullstack/logs:/opt/fuseloja-fullstack/logs \
            --env-file .env \
            --memory="1g" \
            --cpus="0.5" \
            fuseloja-app; then
            echo "❌ Failed to start container!"
            exit 1
          fi
          
          echo "🔍 Verifying deployment..."
          # Wait for container to fully start
          sleep 15
          
          # Check if container is running
          if sudo docker ps | grep fuseloja-app; then
            echo "✅ Container started successfully"
            
            # Wait a bit more for app to initialize
            sleep 10
            
            # Test application health
            for i in {1..6}; do
              if curl -f -s http://localhost:3000/health > /dev/null 2>&1; then
                echo "✅ Application is healthy and responding"
                break
              elif [ $i -eq 6 ]; then
                echo "⚠️ Application health check failed after 60s"
                echo "📋 Container logs:"
                sudo docker logs --tail 50 fuseloja-app
              else
                echo "⏳ Waiting for application to start... (attempt $i/6)"
                sleep 10
              fi
            done
            
            # Show container status
            echo "📊 Container status:"
            sudo docker ps --filter name=fuseloja-app --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
          else
            echo "❌ Container failed to start"
            echo "📋 Container logs:"
            sudo docker logs fuseloja-app
            exit 1
          fi
          
          echo "🎉 Deployment completed successfully!"
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "🎉 ===== DEPLOY SUCCESSFUL ====="
        echo "✅ Application deployed successfully to VPS!"
        echo "🚀 Application URL: https://${{ vars.DOMAIN || 'your-domain.com' }}"
        echo "🌐 Direct IP access: http://${{ secrets.VPS_HOST }}:3000"
        echo "📊 Container: fuseloja-app is running"
        echo "=================================="
        
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "💥 ===== DEPLOY FAILED ====="
        echo "❌ Deployment to VPS failed!"
        echo "🔍 Check the logs above for details"
        echo "💡 Common issues:"
        echo "   - VPS secrets not configured"
        echo "   - Docker build errors"
        echo "   - Network connectivity issues"
        echo "   - Insufficient VPS resources"
        echo "=============================" 