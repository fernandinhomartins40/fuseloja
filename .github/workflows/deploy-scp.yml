name: 🚀 Deploy via SCP (Primary Method)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if no changes'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '18'
  APP_NAME: 'fuseloja-minimal'
  DEPLOY_PATH: '/opt/fuseloja'

jobs:
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json

    - name: 🔧 Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci --silent

    - name: 🔧 Install Backend Dependencies
      working-directory: ./backend
      run: npm ci --silent

    - name: 🏗️ Build Frontend
      working-directory: ./frontend
      run: |
        npm run build
        echo "✅ Frontend build completed"

    - name: 📂 Copy Frontend Build to Backend
      run: |
        rm -rf backend/public
        cp -r frontend/dist backend/public
        echo "✅ Frontend copied to backend/public"

    - name: 📦 Create Deployment Package
      run: |
        echo "📦 Creating deployment package..."
        
        # Create a clean deployment directory
        mkdir -p deployment/backend
        
        # Copy backend files
        cp -r backend/src deployment/backend/
        cp -r backend/public deployment/backend/
        cp backend/package.json deployment/backend/
        cp backend/package-lock.json deployment/backend/
        cp backend/ecosystem.config.js deployment/backend/
        
        # Create deployment archive
        cd deployment
        tar -czf ../deployment.tar.gz .
        cd ..
        
        echo "✅ Deployment package created: $(ls -lh deployment.tar.gz)"

    - name: 📤 Upload Deployment Package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment.tar.gz
        retention-days: 7

  deploy:
    name: 🚀 Deploy to VPS
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Download Deployment Package
      uses: actions/download-artifact@v4
      with:
        name: deployment-package

    - name: 🔧 Setup deployment variables
      run: |
        echo "TIMESTAMP=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_ENV
        echo "COMMIT_HASH=${GITHUB_SHA:0:7}" >> $GITHUB_ENV

    - name: 📤 Copy Files to VPS
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        source: "deployment.tar.gz"
        target: "/tmp/"

    - name: 🚀 Deploy Application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        timeout: 600s
        script: |
          echo "🚀 Starting SCP deployment..."
          
          # Install system dependencies
          echo "📦 Installing system dependencies..."
          apt update -y
          apt install -y curl
          
          # Install Node.js 18 if not exists
          if ! command -v node &> /dev/null; then
            echo "📦 Installing Node.js 18..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
            apt install -y nodejs
          fi
          
          # Verify Node.js installation
          echo "✅ Node.js version: $(node --version)"
          echo "✅ NPM version: $(npm --version)"
          
          # Create directories
          mkdir -p ${{ env.DEPLOY_PATH }}
          cd ${{ env.DEPLOY_PATH }}
          
          # Backup current deployment
          if [ -d "current" ]; then
            echo "📦 Creating backup..."
            cp -r current backup_$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
            # Keep only last 3 backups
            ls -dt backup_* | tail -n +4 | xargs rm -rf 2>/dev/null || true
          fi
          
          # Extract deployment package
          echo "📥 Extracting deployment package..."
          if [ -f "/tmp/deployment.tar.gz" ]; then
            rm -rf fuseloja
            mkdir -p fuseloja
            tar -xzf /tmp/deployment.tar.gz -C fuseloja
            rm -f /tmp/deployment.tar.gz
            echo "✅ Package extracted successfully"
          else
            echo "❌ Deployment package not found"
            exit 1
          fi
          
          # Install production dependencies
          echo "📦 Installing production dependencies..."
          cd fuseloja/backend
          npm ci --silent --production
          
          # Update current symlink
          cd ${{ env.DEPLOY_PATH }}
          rm -f current
          ln -sf fuseloja current
          
          # Setup environment
          cd current/backend
          if [ ! -f .env ]; then
            echo "⚙️ Creating environment file..."
            cat > .env << EOF
          NODE_ENV=production
          PORT=3000
          FRONTEND_URL=https://www.fuseloja.com.br
          DB_HOST=${{ secrets.DB_HOST || 'localhost' }}
          DB_PORT=${{ secrets.DB_PORT || '5432' }}
          DB_NAME=${{ secrets.DB_NAME || 'fuseloja' }}
          DB_USER=${{ secrets.DB_USER || 'postgres' }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD || 'postgres' }}
          JWT_SECRET=${{ secrets.JWT_SECRET || 'change-this-secret-in-production' }}
          EOF
          fi
          
          # Install PM2 if not exists
          if ! command -v pm2 &> /dev/null; then
            echo "📦 Installing PM2..."
            npm install -g pm2
          fi
          
          # Start/restart application
          echo "🔄 Starting application..."
          pm2 delete ${{ env.APP_NAME }} 2>/dev/null || true
          pm2 start src/index.js --name ${{ env.APP_NAME }} --env production
          pm2 save
          
          # Setup PM2 startup (if first time)
          pm2 startup systemd -u $USER --hp /home/$USER 2>/dev/null || true
          
          echo "✅ Deployment completed!"
          
          # Health check
          echo "🔍 Running health check..."
          sleep 10
          if curl -f http://localhost:3000/health > /dev/null 2>&1; then
            echo "✅ Health check passed!"
          else
            echo "❌ Health check failed"
            pm2 logs ${{ env.APP_NAME }} --lines 20
            exit 1
          fi

    - name: 🔍 Verify Deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        script: |
          echo "🔍 Deployment verification..."
          
          # Check PM2 status
          echo "📊 PM2 Status:"
          pm2 status ${{ env.APP_NAME }}
          
          # Check application logs
          echo "📋 Recent logs:"
          pm2 logs ${{ env.APP_NAME }} --lines 10 --nostream
          
          # Test endpoints
          echo "🌐 Testing endpoints..."
          curl -s http://localhost:3000/health | head -5 || echo "Health endpoint OK"
          curl -s http://localhost:3000/ | head -5 || echo "Root endpoint OK"
          
          echo "✅ Verification completed!"

    - name: 📊 Deployment Summary
      if: always()
      run: |
        echo "## 🚀 SCP Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Method:** SCP File Transfer" >> $GITHUB_STEP_SUMMARY
        echo "- **Server:** ${{ secrets.VPS_HOST }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp:** $(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ env.COMMIT_HASH }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL:** https://www.fuseloja.com.br" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [🌐 Website](https://www.fuseloja.com.br)" >> $GITHUB_STEP_SUMMARY
        echo "- [❤️ Health Check](http://${{ secrets.VPS_HOST }}:3000/health)" >> $GITHUB_STEP_SUMMARY
        echo "- [📊 API Status](http://${{ secrets.VPS_HOST }}:3000/)" >> $GITHUB_STEP_SUMMARY

  notify:
    name: 📢 Notify Results
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📢 Success Notification
      if: needs.deploy.result == 'success'
      run: |
        echo "🎉 SCP Deployment successful!"
        echo "✅ Application is live at https://www.fuseloja.com.br"
        
    - name: 🚨 Failure Notification
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ SCP Deployment failed!"
        echo "Check the logs above for details."
        exit 1