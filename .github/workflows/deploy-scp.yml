name: üöÄ Deploy via SCP (Primary Method)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if no changes'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '18'
  APP_NAME: 'fuseloja-minimal'
  DEPLOY_PATH: '/opt/fuseloja'

jobs:
  build:
    name: üèóÔ∏è Build Application
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json

    - name: üöÄ Install Dependencies & Build (Optimized)
      run: |
        echo "‚ö° Starting optimized build process..."
        
        # Use npm ci with optimized flags for speed
        (cd frontend && npm ci --silent --prefer-offline --no-audit --no-fund && npm run build && echo "‚úÖ Frontend build completed") &
        FRONTEND_PID=$!
        
        # Backend deps with production flag and speed optimizations
        (cd backend && npm ci --silent --production --prefer-offline --no-audit --no-fund && echo "‚úÖ Backend deps installed") &
        BACKEND_PID=$!
        
        # Wait for both to complete
        wait $FRONTEND_PID
        wait $BACKEND_PID
        
        echo "‚ö° Optimized operations completed"

    - name: üìÇ Copy Frontend Build to Backend
      run: |
        rm -rf backend/public
        cp -r frontend/dist backend/public
        echo "‚úÖ Frontend copied to backend/public"

    - name: üì¶ Create Deployment Package
      run: |
        echo "üì¶ Creating deployment package..."
        
        # Create a clean deployment directory
        mkdir -p deployment/backend
        
        # Copy backend files
        cp -r backend/src deployment/backend/
        cp -r backend/public deployment/backend/
        cp backend/package.json deployment/backend/
        cp backend/package-lock.json deployment/backend/
        cp backend/ecosystem.config.js deployment/backend/
        
        # Create deployment archive
        cd deployment
        tar -czf ../deployment.tar.gz .
        cd ..
        
        echo "‚úÖ Deployment package created: $(ls -lh deployment.tar.gz)"

    - name: üì§ Upload Deployment Package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment.tar.gz
        retention-days: 7

  deploy:
    name: üöÄ Deploy to VPS
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Download Deployment Package
      uses: actions/download-artifact@v4
      with:
        name: deployment-package

    - name: üîß Setup deployment variables
      run: |
        echo "TIMESTAMP=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_ENV
        echo "COMMIT_HASH=${GITHUB_SHA:0:7}" >> $GITHUB_ENV

    - name: Debug - Check deployment package before upload
      run: |
        echo "Checking deployment package before upload..."
        if [ -f "deployment.tar.gz" ]; then
          echo "Found deployment package:"
          ls -lh deployment.tar.gz
          echo "Package size: $(stat -c%s deployment.tar.gz) bytes"
          echo "Package contents (first 10 files):"
          tar -tzf deployment.tar.gz | head -10
        else
          echo "ERROR: deployment.tar.gz not found!"
          echo "Current directory contents:"
          ls -la
          exit 1
        fi

    - name: üì§ Copy Files to VPS
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        source: "deployment.tar.gz"
        target: "/tmp/"
        debug: true

    - name: üöÄ Deploy Application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        timeout: 600s
        script: |
          echo "üöÄ Starting SCP deployment..."
          
          # Install system dependencies (optimized)
          echo "üì¶ Checking system dependencies..."
          if ! command -v node &> /dev/null || ! command -v curl &> /dev/null; then
            echo "üì¶ Installing required packages..."
            apt update -qq
            apt install -y curl > /dev/null 2>&1
            
            # Install Node.js 18 if not exists
            if ! command -v node &> /dev/null; then
              echo "üì¶ Installing Node.js 18..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | bash - > /dev/null 2>&1
              apt install -y nodejs > /dev/null 2>&1
            fi
          else
            echo "‚úÖ System dependencies already installed"
          fi
          
          # Verify Node.js installation
          echo "‚úÖ Node.js version: $(node --version)"
          echo "‚úÖ NPM version: $(npm --version)"
          
          # Create directories
          mkdir -p ${{ env.DEPLOY_PATH }}
          cd ${{ env.DEPLOY_PATH }}
          
          # Backup current deployment
          if [ -d "current" ]; then
            echo "üì¶ Creating backup..."
            cp -r current backup_$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
            # Keep only last 3 backups
            ls -dt backup_* | tail -n +4 | xargs rm -rf 2>/dev/null || true
          fi
          
          # Extract deployment package
          echo "Extracting deployment package..."
          echo "DEBUG: Checking /tmp directory..."
          ls -la /tmp/ | grep -E "(deployment|tar|gz)" || echo "No deployment files found in /tmp"
          
          if [ -f "/tmp/deployment.tar.gz" ]; then
            echo "SUCCESS: Found deployment package:"
            ls -lh /tmp/deployment.tar.gz
            rm -rf fuseloja
            mkdir -p fuseloja
            tar -xzf /tmp/deployment.tar.gz -C fuseloja
            rm -f /tmp/deployment.tar.gz
            echo "SUCCESS: Package extracted successfully"
            echo "Contents of fuseloja directory:"
            ls -la fuseloja/
          else
            echo "ERROR: Deployment package not found in /tmp/"
            echo "Contents of /tmp directory:"
            ls -la /tmp/
            echo "Looking for any .tar.gz files in /tmp:"
            find /tmp -name "*.tar.gz" -ls 2>/dev/null || echo "No .tar.gz files found"
            echo "Looking for deployment files anywhere:"
            find /tmp -name "*deployment*" -ls 2>/dev/null || echo "No deployment files found"
            exit 1
          fi
          
          # Fast deployment setup
          echo "‚ö° Fast deployment setup..."
          cd fuseloja/backend
          
          # Install production dependencies (node_modules not included in build)
          echo "üì¶ Installing production dependencies..."
          npm ci --silent --production --prefer-offline --no-audit --no-fund
          
          # Optimize database setup - run in background with timeout
          echo "üóÉÔ∏è Setting up database (optimized)..."
          (timeout 60s node src/scripts/createTables.js && timeout 30s node src/scripts/seedData.js) > /tmp/db-setup.log 2>&1 &
          DB_PID=$!
          
          # Update current symlink
          cd ${{ env.DEPLOY_PATH }}
          rm -f current
          ln -sf fuseloja current
          
          # Setup environment
          cd current/backend
          if [ ! -f .env ]; then
            echo "‚öôÔ∏è Creating environment file..."
            cat > .env << EOF
          NODE_ENV=production
          PORT=3000
          FRONTEND_URL=https://www.fuseloja.com.br
          DB_HOST=${{ secrets.DB_HOST || 'localhost' }}
          DB_PORT=${{ secrets.DB_PORT || '5432' }}
          DB_NAME=${{ secrets.DB_NAME || 'fuseloja' }}
          DB_USER=${{ secrets.DB_USER || 'postgres' }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD || 'postgres' }}
          JWT_SECRET=${{ secrets.JWT_SECRET || 'change-this-secret-in-production' }}
          EOF
          fi
          
          # Install PM2 if not exists (optimized)
          if ! command -v pm2 &> /dev/null; then
            echo "üì¶ Installing PM2..."
            npm install -g pm2 --silent --prefer-offline --no-audit --no-fund > /dev/null 2>&1
          fi
          
          # Wait for database setup to complete
          wait $DB_PID && echo "‚úÖ Database setup completed" || echo "‚ö†Ô∏è Database setup had warnings"
          
          # Fast application restart
          echo "‚ö° Fast application restart..."
          if pm2 describe ${{ env.APP_NAME }} > /dev/null 2>&1; then
            echo "üîÑ Restarting existing process..."
            pm2 restart ${{ env.APP_NAME }} --update-env
          else
            echo "üöÄ Starting new process..."
            pm2 start src/index.js --name ${{ env.APP_NAME }} --env production
          fi
          pm2 save > /dev/null
          
          # Setup PM2 startup (if first time)
          pm2 startup systemd -u $USER --hp /home/$USER 2>/dev/null || true
          
          echo "‚úÖ Deployment completed!"
          
          # Quick health check
          echo "üîç Running health check..."
          sleep 5
          for i in {1..3}; do
            if curl -f http://localhost:3000/health > /dev/null 2>&1; then
              echo "‚úÖ Health check passed!"
              break
            elif [ $i -eq 3 ]; then
              echo "‚ùå Health check failed after 3 attempts"
              pm2 logs ${{ env.APP_NAME }} --lines 10
              exit 1
            else
              echo "‚è≥ Health check attempt $i failed, retrying..."
              sleep 3
            fi
          done

    - name: üîç Verify Deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        script: |
          echo "üîç Deployment verification..."
          
          # Check PM2 status
          echo "üìä PM2 Status:"
          pm2 status ${{ env.APP_NAME }}
          
          # Check application logs
          echo "üìã Recent logs:"
          pm2 logs ${{ env.APP_NAME }} --lines 10 --nostream
          
          # Test endpoints
          echo "üåê Testing endpoints..."
          curl -s http://localhost:3000/health | head -5 || echo "Health endpoint OK"
          curl -s http://localhost:3000/ | head -5 || echo "Root endpoint OK"
          
          echo "‚úÖ Verification completed!"

    - name: üìä Deployment Summary
      if: always()
      run: |
        echo "## üöÄ SCP Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Method:** SCP File Transfer" >> $GITHUB_STEP_SUMMARY
        echo "- **Server:** ${{ secrets.VPS_HOST }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp:** $(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ env.COMMIT_HASH }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL:** https://www.fuseloja.com.br" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [üåê Website](https://www.fuseloja.com.br)" >> $GITHUB_STEP_SUMMARY
        echo "- [‚ù§Ô∏è Health Check](http://${{ secrets.VPS_HOST }}:3000/health)" >> $GITHUB_STEP_SUMMARY
        echo "- [üìä API Status](http://${{ secrets.VPS_HOST }}:3000/)" >> $GITHUB_STEP_SUMMARY

  notify:
    name: üì¢ Notify Results
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: üì¢ Success Notification
      if: needs.deploy.result == 'success'
      run: |
        echo "üéâ SCP Deployment successful!"
        echo "‚úÖ Application is live at https://www.fuseloja.com.br"
        
    - name: üö® Failure Notification
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå SCP Deployment failed!"
        echo "Check the logs above for details."
        exit 1