name: 🚀 Deploy via SCP (Primary Method)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if no changes'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '18'
  APP_NAME: 'fuseloja-minimal'
  DEPLOY_PATH: '/opt/fuseloja'

jobs:
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json

    - name: 🚀 Install Dependencies & Build (Optimized)
      run: |
        echo "⚡ Starting optimized build process..."
        
        # Use npm ci with optimized flags for speed
        (cd frontend && npm ci --silent --prefer-offline --no-audit --no-fund && npm run build && echo "✅ Frontend build completed") &
        FRONTEND_PID=$!
        
        # Backend deps with production flag and speed optimizations
        (cd backend && npm ci --silent --production --prefer-offline --no-audit --no-fund && echo "✅ Backend deps installed") &
        BACKEND_PID=$!
        
        # Wait for both to complete
        wait $FRONTEND_PID
        wait $BACKEND_PID
        
        echo "⚡ Optimized operations completed"

    - name: 📂 Copy Frontend Build to Backend
      run: |
        rm -rf backend/public
        cp -r frontend/dist backend/public
        echo "✅ Frontend copied to backend/public"

    - name: 📦 Create Deployment Package
      run: |
        echo "📦 Creating deployment package..."
        
        # Create a clean deployment directory
        mkdir -p deployment/backend
        
        # Copy backend files
        cp -r backend/src deployment/backend/
        cp -r backend/public deployment/backend/
        cp backend/package.json deployment/backend/
        cp backend/package-lock.json deployment/backend/
        cp backend/ecosystem.config.js deployment/backend/
        
        # Create deployment archive
        cd deployment
        tar -czf ../deployment.tar.gz .
        cd ..
        
        echo "✅ Deployment package created: $(ls -lh deployment.tar.gz)"

    - name: 📤 Upload Deployment Package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment.tar.gz
        retention-days: 7

  deploy:
    name: 🚀 Deploy to VPS
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Download Deployment Package
      uses: actions/download-artifact@v4
      with:
        name: deployment-package

    - name: 🔧 Setup deployment variables
      run: |
        echo "TIMESTAMP=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_ENV
        echo "COMMIT_HASH=${GITHUB_SHA:0:7}" >> $GITHUB_ENV

    - name: Debug - Check deployment package before upload
      run: |
        echo "Checking deployment package before upload..."
        if [ -f "deployment.tar.gz" ]; then
          echo "Found deployment package:"
          ls -lh deployment.tar.gz
          echo "Package size: $(stat -c%s deployment.tar.gz) bytes"
          echo "Package contents (first 10 files):"
          tar -tzf deployment.tar.gz | head -10
        else
          echo "ERROR: deployment.tar.gz not found!"
          echo "Current directory contents:"
          ls -la
          exit 1
        fi

    - name: 📤 Copy Files to VPS
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        source: "deployment.tar.gz"
        target: "/tmp/"
        debug: true

    - name: 🚀 Deploy Application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        timeout: 900s
        script: |
          echo "🚀 Starting SCP deployment..."
          
          # Install system dependencies (optimized)
          echo "📦 Checking system dependencies..."
          if ! command -v node &> /dev/null || ! command -v curl &> /dev/null; then
            echo "📦 Installing required packages..."
            apt update -qq
            apt install -y curl > /dev/null 2>&1
            
            # Install Node.js 18 if not exists
            if ! command -v node &> /dev/null; then
              echo "📦 Installing Node.js 18..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | bash - > /dev/null 2>&1
              apt install -y nodejs > /dev/null 2>&1
            fi
          else
            echo "✅ System dependencies already installed"
          fi
          
          # Install and setup PostgreSQL if not exists
          if ! command -v psql &> /dev/null; then
            echo "📦 Installing PostgreSQL..."
            apt update -qq
            apt install -y postgresql postgresql-contrib > /dev/null 2>&1
            systemctl start postgresql
            systemctl enable postgresql
            
            # Setup database and user
            echo "🗃️ Setting up PostgreSQL database..."
            sudo -u postgres psql -c "CREATE DATABASE fuseloja;" 2>/dev/null || echo "Database already exists"
            # Set password for existing postgres user
            sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'postgres';"
            sudo -u postgres psql -c "ALTER USER postgres CREATEDB;"
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE fuseloja TO postgres;"
            
            # Configure PostgreSQL for local connections
            echo "🔧 Configuring PostgreSQL authentication..."
            echo "local   all             postgres                                md5" > /tmp/pg_hba_local.conf
            echo "local   all             all                                     md5" >> /tmp/pg_hba_local.conf
            echo "host    all             all             127.0.0.1/32            md5" >> /tmp/pg_hba_local.conf
            echo "host    all             all             ::1/128                 md5" >> /tmp/pg_hba_local.conf
            cp /etc/postgresql/*/main/pg_hba.conf /etc/postgresql/*/main/pg_hba.conf.bak
            cat /tmp/pg_hba_local.conf > /etc/postgresql/*/main/pg_hba.conf
            systemctl restart postgresql
          else
            echo "✅ PostgreSQL already installed"
            # Ensure PostgreSQL is running
            systemctl start postgresql 2>/dev/null || echo "PostgreSQL already running"
            
            # Ensure database and user exist with correct password
            echo "🗃️ Checking PostgreSQL configuration..."
            sudo -u postgres psql -c "CREATE DATABASE fuseloja;" 2>/dev/null || echo "Database already exists"
            sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'postgres';"
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE fuseloja TO postgres;"
          fi
          
          # Verify Node.js installation
          echo "✅ Node.js version: $(node --version)"
          echo "✅ NPM version: $(npm --version)"
          
          # Create directories
          mkdir -p ${{ env.DEPLOY_PATH }}
          cd ${{ env.DEPLOY_PATH }}
          
          # Backup current deployment
          if [ -d "current" ]; then
            echo "📦 Creating backup..."
            cp -r current backup_$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
            # Keep only last 3 backups
            ls -dt backup_* | tail -n +4 | xargs rm -rf 2>/dev/null || true
          fi
          
          # Extract deployment package
          echo "Extracting deployment package..."
          echo "DEBUG: Checking /tmp directory..."
          ls -la /tmp/ | grep -E "(deployment|tar|gz)" || echo "No deployment files found in /tmp"
          
          if [ -f "/tmp/deployment.tar.gz" ]; then
            echo "SUCCESS: Found deployment package:"
            ls -lh /tmp/deployment.tar.gz
            rm -rf fuseloja
            mkdir -p fuseloja
            tar -xzf /tmp/deployment.tar.gz -C fuseloja
            rm -f /tmp/deployment.tar.gz
            echo "SUCCESS: Package extracted successfully"
            echo "Contents of fuseloja directory:"
            ls -la fuseloja/
          else
            echo "ERROR: Deployment package not found in /tmp/"
            echo "Contents of /tmp directory:"
            ls -la /tmp/
            echo "Looking for any .tar.gz files in /tmp:"
            find /tmp -name "*.tar.gz" -ls 2>/dev/null || echo "No .tar.gz files found"
            echo "Looking for deployment files anywhere:"
            find /tmp -name "*deployment*" -ls 2>/dev/null || echo "No deployment files found"
            exit 1
          fi
          
          # Fast deployment setup
          echo "⚡ Fast deployment setup..."
          echo "📍 Current directory: $(pwd)"
          echo "📁 Contents: $(ls -la fuseloja/ 2>/dev/null || echo 'fuseloja directory not found')"
          cd fuseloja/backend
          echo "📍 Now in: $(pwd)"
          echo "📄 Backend files: $(ls -la 2>/dev/null || echo 'backend files not found')"
          
          # Install production dependencies with timeout
          echo "📦 Installing production dependencies..."
          timeout 180s npm ci --silent --production --prefer-offline --no-audit --no-fund || {
            echo "⚠️ npm ci timed out or failed, trying npm install..."
            timeout 120s npm install --silent --production --prefer-offline --no-audit --no-fund
          }
          
          # Database setup with explicit timeout and logging
          echo "🗃️ Setting up database (optimized)..."
          (
            echo "Starting database setup at $(date)"
            timeout 60s node src/scripts/createTables.js 2>&1 && echo "Tables created successfully" || echo "Table creation failed/timed out"
            timeout 30s node src/scripts/seedData.js 2>&1 && echo "Data seeded successfully" || echo "Data seeding failed/timed out"
            echo "Database setup finished at $(date)"
          ) > /tmp/db-setup.log 2>&1 &
          DB_PID=$!
          
          # Update current symlink
          cd ${{ env.DEPLOY_PATH }}
          rm -f current
          ln -sf fuseloja current
          
          # Setup environment
          cd current/backend
          if [ ! -f .env ]; then
            echo "⚙️ Creating environment file..."
            cat > .env << EOF
          NODE_ENV=production
          PORT=3000
          FRONTEND_URL=https://www.fuseloja.com.br
          DB_HOST=${{ secrets.DB_HOST || 'localhost' }}
          DB_PORT=${{ secrets.DB_PORT || '5432' }}
          DB_NAME=${{ secrets.DB_NAME || 'fuseloja' }}
          DB_USER=${{ secrets.DB_USER || 'postgres' }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD || 'postgres' }}
          JWT_SECRET=${{ secrets.JWT_SECRET || 'change-this-secret-in-production' }}
          EOF
          fi
          
          # Install PM2 if not exists (with timeout)
          if ! command -v pm2 &> /dev/null; then
            echo "📦 Installing PM2..."
            timeout 60s npm install -g pm2 --silent --prefer-offline --no-audit --no-fund > /dev/null 2>&1 || {
              echo "⚠️ PM2 global install failed, trying without cache..."
              timeout 60s npm install -g pm2 --silent > /dev/null 2>&1
            }
          fi
          
          # Wait for database setup with timeout
          echo "⏳ Waiting for database setup (max 2 minutes)..."
          if timeout 120s bash -c "wait $DB_PID"; then
            echo "✅ Database setup completed"
            echo "📋 Database setup log:"
            tail -10 /tmp/db-setup.log 2>/dev/null || echo "No database log available"
          else
            echo "⚠️ Database setup timed out or had warnings"
            echo "📋 Database setup log (last 20 lines):"
            tail -20 /tmp/db-setup.log 2>/dev/null || echo "No database log available"
          fi
          
          # Fast application restart
          echo "⚡ Fast application restart..."
          echo "📍 Current directory for PM2: $(pwd)"
          echo "📄 Checking index.js: $(ls -la src/index.js 2>/dev/null || echo 'index.js not found')"
          
          # Kill any existing process first
          pm2 delete ${{ env.APP_NAME }} 2>/dev/null || echo "No existing process to delete"
          
          echo "🚀 Starting new process..."
          timeout 30s pm2 start src/index.js --name ${{ env.APP_NAME }} --env production || {
            echo "❌ PM2 start failed, checking logs..."
            pm2 logs ${{ env.APP_NAME }} --lines 5 2>/dev/null || echo "No PM2 logs available"
            exit 1
          }
          
          timeout 10s pm2 save > /dev/null || echo "⚠️ PM2 save failed"
          
          # Setup PM2 startup (non-interactive)
          timeout 30s pm2 startup systemd -u $USER --hp /home/$USER 2>/dev/null || echo "⚠️ PM2 startup setup skipped"
          
          echo "✅ Deployment completed!"
          
          # Extended health check with database readiness
          echo "🔍 Running health check..."
          echo "⏳ Waiting for application to initialize..."
          sleep 10
          
          # Check if PM2 process is running
          if ! pm2 describe ${{ env.APP_NAME }} > /dev/null 2>&1; then
            echo "❌ PM2 process not running"
            pm2 status
            exit 1
          fi
          
          # Try health check up to 6 times (2 minutes total)
          for i in {1..6}; do
            echo "🔍 Health check attempt $i/6..."
            if curl -f http://localhost:3000/health > /dev/null 2>&1; then
              echo "✅ Health check passed!"
              # Test a few more endpoints to ensure everything works
              curl -s http://localhost:3000/api > /dev/null && echo "✅ API endpoint working"
              curl -s http://localhost:3000/ > /dev/null && echo "✅ Frontend serving"
              break
            elif [ $i -eq 6 ]; then
              echo "❌ Health check failed after 6 attempts"
              echo "📊 PM2 Status:"
              pm2 status
              echo "📋 Application logs:"
              pm2 logs ${{ env.APP_NAME }} --lines 20
              echo "🗃️ Database setup log:"
              cat /tmp/db-setup.log 2>/dev/null || echo "No database log available"
              # Don't exit 1 - let it continue, app might still work
              echo "⚠️ Health check failed but continuing deployment"
            else
              echo "⏳ Health check attempt $i failed, retrying in 20s..."
              sleep 20
            fi
          done

    - name: 🔍 Verify Deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        script: |
          echo "🔍 Deployment verification..."
          
          # Check PM2 status
          echo "📊 PM2 Status:"
          pm2 status ${{ env.APP_NAME }}
          
          # Check application logs
          echo "📋 Recent logs:"
          pm2 logs ${{ env.APP_NAME }} --lines 10 --nostream
          
          # Test endpoints
          echo "🌐 Testing endpoints..."
          curl -s http://localhost:3000/health | head -5 || echo "Health endpoint OK"
          curl -s http://localhost:3000/ | head -5 || echo "Root endpoint OK"
          
          echo "✅ Verification completed!"

    - name: 📊 Deployment Summary
      if: always()
      run: |
        echo "## 🚀 SCP Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Method:** SCP File Transfer" >> $GITHUB_STEP_SUMMARY
        echo "- **Server:** ${{ secrets.VPS_HOST }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp:** $(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ env.COMMIT_HASH }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL:** https://www.fuseloja.com.br" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [🌐 Website](https://www.fuseloja.com.br)" >> $GITHUB_STEP_SUMMARY
        echo "- [❤️ Health Check](http://${{ secrets.VPS_HOST }}:3000/health)" >> $GITHUB_STEP_SUMMARY
        echo "- [📊 API Status](http://${{ secrets.VPS_HOST }}:3000/)" >> $GITHUB_STEP_SUMMARY

  notify:
    name: 📢 Notify Results
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📢 Success Notification
      if: needs.deploy.result == 'success'
      run: |
        echo "🎉 SCP Deployment successful!"
        echo "✅ Application is live at https://www.fuseloja.com.br"
        
    - name: 🚨 Failure Notification
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ SCP Deployment failed!"
        echo "Check the logs above for details."
        exit 1