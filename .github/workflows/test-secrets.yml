name: Test VPS Secrets Configuration

on:
  workflow_dispatch:
    inputs:
      test_connection:
        description: 'Test SSH connection to VPS'
        required: false
        default: false
        type: boolean

jobs:
  test-secrets:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check VPS Secrets Configuration
      run: |
        echo "🔍 TESTING VPS SECRETS CONFIGURATION"
        echo "══════════════════════════════════════════════════════════════"
        echo ""
        
        # Test required secrets
        echo "📋 REQUIRED SECRETS:"
        echo "───────────────────────────────────────────────────────────"
        
        MISSING_SECRETS=""
        CONFIGURED_SECRETS=""
        
        # Check VPS_HOST
        if [ -z "${{ secrets.VPS_HOST }}" ]; then
          echo "❌ VPS_HOST: Missing"
          MISSING_SECRETS="$MISSING_SECRETS VPS_HOST"
        else
          echo "✅ VPS_HOST: Configured (${#{{ secrets.VPS_HOST }}} chars)"
          CONFIGURED_SECRETS="$CONFIGURED_SECRETS VPS_HOST"
        fi
        
        # Check VPS_USERNAME
        if [ -z "${{ secrets.VPS_USERNAME }}" ]; then
          echo "❌ VPS_USERNAME: Missing"
          MISSING_SECRETS="$MISSING_SECRETS VPS_USERNAME"
        else
          echo "✅ VPS_USERNAME: Configured (${#{{ secrets.VPS_USERNAME }}} chars)"
          CONFIGURED_SECRETS="$CONFIGURED_SECRETS VPS_USERNAME"
        fi
        
        # Check authentication method
        HAS_PASSWORD=""
        HAS_SSH_KEY=""
        
        if [ -n "${{ secrets.VPS_PASSWORD }}" ]; then
          echo "✅ VPS_PASSWORD: Configured (${#{{ secrets.VPS_PASSWORD }}} chars)"
          HAS_PASSWORD="yes"
          CONFIGURED_SECRETS="$CONFIGURED_SECRETS VPS_PASSWORD"
        else
          echo "❌ VPS_PASSWORD: Missing"
        fi
        
        if [ -n "${{ secrets.VPS_SSH_KEY }}" ]; then
          echo "✅ VPS_SSH_KEY: Configured (${#{{ secrets.VPS_SSH_KEY }}} chars)"
          HAS_SSH_KEY="yes"
          CONFIGURED_SECRETS="$CONFIGURED_SECRETS VPS_SSH_KEY"
        else
          echo "❌ VPS_SSH_KEY: Missing"
        fi
        
        if [ -z "$HAS_PASSWORD" ] && [ -z "$HAS_SSH_KEY" ]; then
          echo "❌ AUTHENTICATION: Neither VPS_PASSWORD nor VPS_SSH_KEY configured"
          MISSING_SECRETS="$MISSING_SECRETS VPS_AUTH_METHOD"
        else
          echo "✅ AUTHENTICATION: Method available"
        fi
        
        echo ""
        echo "📋 OPTIONAL SECRETS:"
        echo "───────────────────────────────────────────────────────────"
        
        # Check optional secrets
        if [ -n "${{ secrets.VPS_PORT }}" ]; then
          echo "✅ VPS_PORT: Configured (${{ secrets.VPS_PORT }})"
        else
          echo "ℹ️  VPS_PORT: Using default (22)"
        fi
        
        if [ -n "${{ secrets.JWT_SECRET }}" ]; then
          echo "✅ JWT_SECRET: Configured (${#{{ secrets.JWT_SECRET }}} chars)"
        else
          echo "⚠️  JWT_SECRET: Missing (will use default - not recommended for production)"
        fi
        
        if [ -n "${{ secrets.JWT_REFRESH_SECRET }}" ]; then
          echo "✅ JWT_REFRESH_SECRET: Configured (${#{{ secrets.JWT_REFRESH_SECRET }}} chars)"
        else
          echo "⚠️  JWT_REFRESH_SECRET: Missing (will use default - not recommended for production)"
        fi
        
        if [ -n "${{ secrets.EMAIL_USER }}" ]; then
          echo "✅ EMAIL_USER: Configured (${{ secrets.EMAIL_USER }})"
        else
          echo "ℹ️  EMAIL_USER: Missing (email features disabled)"
        fi
        
        if [ -n "${{ secrets.EMAIL_PASSWORD }}" ]; then
          echo "✅ EMAIL_PASSWORD: Configured (${#{{ secrets.EMAIL_PASSWORD }}} chars)"
        else
          echo "ℹ️  EMAIL_PASSWORD: Missing (email features disabled)"
        fi
        
        echo ""
        echo "📋 VARIABLES:"
        echo "───────────────────────────────────────────────────────────"
        
        if [ -n "${{ vars.DOMAIN }}" ]; then
          echo "✅ DOMAIN: Configured (${{ vars.DOMAIN }})"
        else
          echo "ℹ️  DOMAIN: Missing (will use default)"
        fi
        
        if [ -n "${{ vars.CORS_ORIGINS }}" ]; then
          echo "✅ CORS_ORIGINS: Configured (${{ vars.CORS_ORIGINS }})"
        else
          echo "ℹ️  CORS_ORIGINS: Missing (will use default)"
        fi
        
        echo ""
        echo "══════════════════════════════════════════════════════════════"
        
        # Summary
        if [ -n "$MISSING_SECRETS" ]; then
          echo "🚨 CONFIGURATION STATUS: INCOMPLETE"
          echo ""
          echo "Missing required secrets:$MISSING_SECRETS"
          echo ""
          echo "📝 TO FIX:"
          echo "1. Go to: https://github.com/${{ github.repository }}/settings/secrets/actions"
          echo "2. Click 'New repository secret'"
          echo "3. Add each missing secret listed above"
          echo ""
          echo "📖 Documentation: .github/DEPLOY_SECRETS.md"
          echo "══════════════════════════════════════════════════════════════"
          exit 1
        else
          echo "✅ CONFIGURATION STATUS: COMPLETE"
          echo ""
          echo "All required secrets are configured!"
          echo "Configured secrets:$CONFIGURED_SECRETS"
          echo ""
          if [ -n "$HAS_SSH_KEY" ]; then
            echo "🔐 Using SSH Key authentication (recommended)"
          else
            echo "🔐 Using Password authentication"
          fi
          echo "══════════════════════════════════════════════════════════════"
        fi

    - name: Test SSH Connection
      if: ${{ github.event.inputs.test_connection == 'true' && secrets.VPS_HOST != '' && secrets.VPS_USERNAME != '' }}
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        timeout: 30s
        script: |
          echo "🔌 SSH CONNECTION TEST"
          echo "═══════════════════════════════════════════"
          echo "✅ SSH connection successful!"
          echo "🖥️  Server: $(hostname)"
          echo "👤 User: $(whoami)"
          echo "📂 Current directory: $(pwd)"
          echo "🐳 Docker: $(docker --version 2>/dev/null || echo 'Not installed')"
          echo "📦 Git: $(git --version 2>/dev/null || echo 'Not installed')"
          echo "💾 Disk space: $(df -h / | tail -1 | awk '{print $4}') available"
          echo "🧠 Memory: $(free -h | grep Mem | awk '{print $7}') available"
          echo "═══════════════════════════════════════════"
          
          # Check if deploy directory exists
          if [ -d "/opt/fuseloja-fullstack" ]; then
            echo "📁 Deploy directory: EXISTS"
          else
            echo "📁 Deploy directory: NOT FOUND (will be created during deploy)"
          fi
          
          # Check Docker permissions
          if docker ps > /dev/null 2>&1; then
            echo "🐳 Docker permissions: OK"
          else
            echo "⚠️  Docker permissions: Limited (may need sudo)"
          fi

    - name: Summary
      if: always()
      run: |
        echo ""
        echo "🎯 NEXT STEPS:"
        echo "─────────────────────────────────────────────────────────────"
        
        if [ -z "${{ secrets.VPS_HOST }}" ] || [ -z "${{ secrets.VPS_USERNAME }}" ]; then
          echo "1. ❌ Configure missing secrets first"
          echo "2. 🔄 Re-run this test workflow"
          echo "3. 🚀 Then try the deploy workflow"
        else
          if [ "${{ github.event.inputs.test_connection }}" == "true" ]; then
            echo "1. ✅ Secrets and connection tested"
            echo "2. 🚀 Ready for deployment!"
            echo "3. 📤 Push to main branch or run deploy workflow manually"
          else
            echo "1. ✅ Secrets configured"
            echo "2. 🔌 Optionally test SSH connection (re-run with test_connection=true)"
            echo "3. 🚀 Ready for deployment!"
          fi
        fi
        echo "─────────────────────────────────────────────────────────────"