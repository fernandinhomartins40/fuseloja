# Multi-stage build for full-stack application
FROM node:20-alpine AS frontend-builder

# Set working directory for frontend
WORKDIR /app/frontend

# Copy frontend package files
COPY package*.json ./

# Install frontend dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy frontend source code
COPY src/ ./src/
COPY public/ ./public/
COPY index.html ./
COPY vite.config.ts ./
COPY tsconfig*.json ./
COPY tailwind.config.ts ./
COPY postcss.config.js ./
COPY components.json ./

# Build frontend
RUN npm run build

# Backend builder stage
FROM node:20-alpine AS backend-builder

# Set working directory for backend
WORKDIR /app/backend

# Copy backend package files
COPY backend/package*.json ./
COPY backend/tsconfig.json ./

# Install backend dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy backend source code
COPY backend/src/ ./src/

# Build backend TypeScript
RUN npm run build

# Production stage
FROM node:20-alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init curl

# Create app user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S fuseloja -u 1001

# Set working directory
WORKDIR /app

# Create necessary directories
RUN mkdir -p data uploads logs backups ssl && \
    chown -R fuseloja:nodejs /app

# Copy backend package files
COPY backend/package*.json ./

# Install only backend production dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy built backend from builder stage
COPY --from=backend-builder /app/backend/dist ./dist

# Copy built frontend from builder stage
COPY --from=frontend-builder /app/frontend/dist ./public

# Copy backend environment file template
COPY backend/.env.example ./.env.example

# Create startup script
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo 'echo "🚀 Starting Fuseloja Full Stack Application..."' >> /app/start.sh && \
    echo 'echo "📁 Frontend files: $(ls -la /app/public | wc -l) files"' >> /app/start.sh && \
    echo 'echo "🔧 Backend starting on port $PORT"' >> /app/start.sh && \
    echo 'exec node dist/app.js' >> /app/start.sh && \
    chmod +x /app/start.sh

# Switch to non-root user
USER fuseloja

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Start application with dumb-init
ENTRYPOINT ["dumb-init", "--"]
CMD ["/app/start.sh"] 