# Multi-stage build para otimização
FROM node:18-alpine AS frontend-builder

WORKDIR /app/frontend

# Copy frontend package files
COPY frontend/package*.json ./
RUN npm ci --only=production --silent

# Copy frontend source and build
COPY frontend/ ./
RUN npm run build

# Backend stage
FROM node:18-alpine AS backend-builder

WORKDIR /app/backend

# Install PM2 globally
RUN npm install -g pm2

# Copy backend package files
COPY backend/package*.json ./
RUN npm ci --only=production --silent

# Copy backend source
COPY backend/ ./

# Copy frontend build to backend public
COPY --from=frontend-builder /app/frontend/dist ./public

# Production stage
FROM node:18-alpine AS production

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S fuseloja -u 1001

# Install PM2
RUN npm install -g pm2

# Set working directory
WORKDIR /app

# Copy application files
COPY --from=backend-builder --chown=fuseloja:nodejs /app/backend ./
COPY --from=backend-builder /usr/local/lib/node_modules/pm2 /usr/local/lib/node_modules/pm2
COPY --from=backend-builder /usr/local/bin/pm2 /usr/local/bin/pm2

# Create logs directory
RUN mkdir -p /app/logs && chown -R fuseloja:nodejs /app/logs

# Switch to non-root user
USER fuseloja

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/health', (res) => { \
    if (res.statusCode === 200) process.exit(0); else process.exit(1); \
  }).on('error', () => process.exit(1));"

# Expose port
EXPOSE 3000

# Start application with PM2
CMD ["pm2-runtime", "start", "ecosystem.config.js", "--env", "production"]

# Metadata
LABEL maintainer="FuseLoja Team"
LABEL version="1.0.0-minimal"
LABEL description="FuseLoja E-commerce - Minimal Backend"